#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import logging
from argparse import ArgumentParser

from utils import load_data
from lm import NeuralLM
from deepy.trainers import SGDTrainer, LearningRateAnnealer, AdamTrainer
from deepy.layers import LSTM, Dense, RNN, Softmax3D
from layers import FullOutputLayer
import theano.tensor as T
import numpy as np

logging.basicConfig(level=logging.INFO)

default_model = os.path.join(os.path.dirname(__file__), "models", "baseline_rnnlm.gz")

if __name__ == '__main__':
    ap = ArgumentParser()
    ap.add_argument("--model", default=default_model)
    ap.add_argument("--small", action="store_true")
    args = ap.parse_args()

    vocab, lmdata = load_data(small=args.small, history_len=5, batch_size=64)
    inputx=T.imatrix('xtang')
    model = NeuralLM(vocab.size, test_data=None, input_tensor=inputx)
    model.stack(RNN(hidden_size=100, output_type="sequence", hidden_activation="sigmoid",
                    persistent_state=True, batch_size=lmdata.size,
                    reset_state_for_input=0),
                FullOutputLayer(vocab.size))

    if os.path.exists(args.model):
        model.load_params(args.model)

    trainer = SGDTrainer(model, {"learning_rate": LearningRateAnnealer.learning_rate(1.2),
                                 "weight_l2": 1e-7})
    annealer = LearningRateAnnealer(trainer)
    # trainer.hidout2(lmdata.valid_set())

    a=np.asarray([[[   0,    7, 1134,    2,    1,2],
       [   0,   78,    2,    3, 1231,2],
       [   0,  405, 4233,   13,    5,3],
       [   0,  596,   38,  685,   16,0],
       [   0,    2,   60,   30,  155,0],
       [   0, 1612, 1527,   65,   15,0],
       [   0,    2, 7474, 5385,  158,0],
       [   0,   23,    1,    8,   61,0],
       [   0,   28,  685,   12,    3,0],
       [   0,    2,  439,  115,   11,0],
       [   0,   39,  604,  273,   24,0],
       [   0,    8,    2, 1272,   13,0],
       [   0,   11,    2,  510,  126,0],
       [   0,   16,    2,  129,  146,0],
       [   0,    2, 8267,  300,   15,0],
       [   0,  813,  833,  284,    3,0],
       [   0, 9995,   15,    2,  331,0],
       [   0,  135,   11,    2,  276,0],
       [   0,  198,    2, 3080,  977,0],
       [   0, 1267,   39,   13,    6,0],
       [   0,  112,   16,    2, 1914,0],
       [   0,    2,    1,    1,   20,0],
       [   0,  215, 3288, 3546,    2,0],
       [   0,  866, 4065,   71,    4,0],
       [   0,    2,   60,    9,  460,0],
       [   0,   29,   56,    9, 5512,0],
       [   0, 2285,   59,   15,   14,0],
       [   0,    2,   37,   59,   15,0],
       [   0,  438,  359,   13,  170,0],
       [   0,  485,    1, 5551,    3,0],
       [   0,    2,  780,   50,   27,0],
       [   0,    2,    1, 1190,  133,0],
       [   0,  244,  128, 1729,   19,0],
       [   0,   79,   32,   64, 1972,0],
       [   0,   77,    4,    2,  408,0],
       [   0,    2,    1,   30,   32,0],
       [   0, 1381, 1416,    0,    2,0],
       [   0,    2, 9704,  993,    6,0],
       [   0,   19,  375,   19,    3,0],
       [   0,   23,    1, 7431, 2764,0],
       [   0,   67,  694,  603,   26,0],
       [   0, 1855,  241, 4514,    5,0],
       [   0,    5,  333,   87,   39,0],
       [   0,    2,   74,  898,   10,0],
       [   0,  147,    2,   47,   50,0],
       [   0,   19,    2,   60,   47,0],
       [   0, 4519,   46,    1,  161,0],
       [   0,    4,  903,  513,   50,0],
       [   0,   23, 3019,   15,    2,0],
       [   0,   29, 1024, 4884,  387,0],
       [   0, 1070,   14,   24,  118,0],
       [   0,    7,    2,  720,    4,0],
       [   0,  196,   70,  547,  556,0],
       [   0,    1,   65,    8,    1,0],
       [   0, 9695,  780, 7966, 4568,0],
       [   0,   49, 7980,    7,    6,0],
       [   0,   28,  143,   32, 2519,0],
       [   0,    2, 2019,   24,    1,0],
       [   0, 1449,   18,    1,    8,0],
       [   0,  114, 2151,  282, 1132,0],
       [   0,   38,   46,    6,    1,0],
       [   0,  486,    1,    2, 1425,0],
       [   0,  282,    9,  129,  618,0],
       [   0, 1899,  268,  412,  266,0]], [[   0,    7, 1134,    2,    1,0],
       [   0,   78,    2,    3, 1231,2],
       [   0,  405, 4233,   13,    5,3],
       [   0,  596,   38,  685,   16,0],
       [   0,    2,   60,   30,  155,0],
       [   0, 1612, 1527,   65,   15,0],
       [   0,    2, 7474, 5385,  158,0],
       [   0,   23,    1,    8,   61,0],
       [   0,   28,  685,   12,    3,0],
       [   0,    2,  439,  115,   11,0],
       [   0,   39,  604,  273,   24,0],
       [   0,    8,    2, 1272,   13,0],
       [   0,   11,    2,  510,  126,0],
       [   0,   16,    2,  129,  146,0],
       [   0,    2, 8267,  300,   15,0],
       [   0,  813,  833,  284,    3,0],
       [   0, 9995,   15,    2,  331,0],
       [   0,  135,   11,    2,  276,0],
       [   0,  198,    2, 3080,  977,0],
       [   0, 1267,   39,   13,    6,0],
       [   0,  112,   16,    2, 1914,0],
       [   0,    2,    1,    1,   20,0],
       [   0,  215, 3288, 3546,    2,0],
       [   0,  866, 4065,   71,    4,0],
       [   0,    2,   60,    9,  460,0],
       [   0,   29,   56,    9, 5512,0],
       [   0, 2285,   59,   15,   14,0],
       [   0,    2,   37,   59,   15,0],
       [   0,  438,  359,   13,  170,0],
       [   0,  485,    1, 5551,    3,0],
       [   0,    2,  780,   50,   27,0],
       [   0,    2,    1, 1190,  133,0],
       [   0,  244,  128, 1729,   19,0],
       [   0,   79,   32,   64, 1972,0],
       [   0,   77,    4,    2,  408,0],
       [   0,    2,    1,   30,   32,0],
       [   0, 1381, 1416,    0,    2,0],
       [   0,    2, 9704,  993,    6,0],
       [   0,   19,  375,   19,    3,0],
       [   0,   23,    1, 7431, 2764,0],
       [   0,   67,  694,  603,   26,0],
       [   0, 1855,  241, 4514,    5,0],
       [   0,    5,  333,   87,   39,0],
       [   0,    2,   74,  898,   10,0],
       [   0,  147,    2,   47,   50,0],
       [   0,   19,    2,   60,   47,0],
       [   0, 4519,   46,    1,  161,0],
       [   0,    4,  903,  513,   50,0],
       [   0,   23, 3019,   15,    2,0],
       [   0,   29, 1024, 4884,  387,0],
       [   0, 1070,   14,   24,  118,0],
       [   0,    7,    2,  720,    4,0],
       [   0,  196,   70,  547,  556,0],
       [   0,    1,   65,    8,    1,0],
       [   0, 9695,  780, 7966, 4568,0],
       [   0,   49, 7980,    7,    6,0],
       [   0,   28,  143,   32, 2519,0],
       [   0,    2, 2019,   24,    1,0],
       [   0, 1449,   18,    1,    8,0],
       [   0,  114, 2151,  282, 1132,0],
       [   0,   38,   46,    6,    1,0],
       [   0,  486,    1,    2, 1425,0],
       [   0,  282,    9,  129,  618,0],
       [   0, 1899,  268,  412,  266,0]]])
    print a.shape

    c=np.zeros((2,64,8))
    print c.shape

    b=np.asarray([[[   0,    7, 1134,    2,    1],
       [   0,   78,    2,    3, 1231],
       [   0,  405, 4233,   13,    5],
       [   0,  596,   38,  685,   16],
       [   0,    2,   60,   30,  155],
       [   0, 1612, 1527,   65,   15],
       [   0,    2, 7474, 5385,  158],
       [   0,   23,    1,    8,   61],
       [   0,   28,  685,   12,    3],
       [   0,    2,  439,  115,   11],
       [   0,   39,  604,  273,   24],
       [   0,    8,    2, 1272,   13],
       [   0,   11,    2,  510,  126],
       [   0,   16,    2,  129,  146],
       [   0,    2, 8267,  300,   15],
       [   0,  813,  833,  284,    3],
       [   0, 9995,   15,    2,  331],
       [   0,  135,   11,    2,  276],
       [   0,  198,    2, 3080,  977],
       [   0, 1267,   39,   13,    6],
       [   0,  112,   16,    2, 1914],
       [   0,    2,    1,    1,   20],
       [   0,  215, 3288, 3546,    2],
       [   0,  866, 4065,   71,    4],
       [   0,    2,   60,    9,  460],
       [   0,   29,   56,    9, 5512],
       [   0, 2285,   59,   15,   14],
       [   0,    2,   37,   59,   15],
       [   0,  438,  359,   13,  170],
       [   0,  485,    1, 5551,    3],
       [   0,    2,  780,   50,   27],
       [   0,    2,    1, 1190,  133],
       [   0,  244,  128, 1729,   19],
       [   0,   79,   32,   64, 1972],
       [   0,   77,    4,    2,  408],
       [   0,    2,    1,   30,   32],
       [   0, 1381, 1416,    0,    2],
       [   0,    2, 9704,  993,    6],
       [   0,   19,  375,   19,    3],
       [   0,   23,    1, 7431, 2764],
       [   0,   67,  694,  603,   26],
       [   0, 1855,  241, 4514,    5],
       [   0,    5,  333,   87,   39],
       [   0,    2,   74,  898,   10],
       [   0,  147,    2,   47,   50],
       [   0,   19,    2,   60,   47],
       [   0, 4519,   46,    1,  161],
       [   0,    4,  903,  513,   50],
       [   0,   23, 3019,   15,    2],
       [   0,   29, 1024, 4884,  387],
       [   0, 1070,   14,   24,  118],
       [   0,    7,    2,  720,    4],
       [   0,  196,   70,  547,  556],
       [   0,    1,   65,    8,    1],
       [   0, 9695,  780, 7966, 4568],
       [   0,   49, 7980,    7,    6],
       [   0,   28,  143,   32, 2519],
       [   0,    2, 2019,   24,    1],
       [   0, 1449,   18,    1,    8],
       [   0,  114, 2151,  282, 1132],
       [   0,   38,   46,    6,    1],
       [   0,  486,    1,    2, 1425],
       [   0,  282,    9,  129,  618],
       [   0, 1899,  268,  412,  266]], [[   7, 1134,    2,    1, 5331],
       [  78,    2,    3, 1231,  190],
       [ 405, 4233,   13,    5,  428],
       [ 596,   38,  685,   16, 1826],
       [   2,   60,   30,  155,    1],
       [1612, 1527,   65,   15,   14],
       [   2, 7474, 5385,  158,   13],
       [  23,    1,    8,   61,  372],
       [  28,  685,   12,    3,   48],
       [   2,  439,  115,   11,    6],
       [  39,  604,  273,   24, 1052],
       [   8,    2, 1272,   13, 2937],
       [  11,    2,  510,  126, 7312],
       [  16,    2,  129,  146, 1013],
       [   2, 8267,  300,   15,    2],
       [ 813,  833,  284,    3,    3],
       [9995,   15,    2,  331,  723],
       [ 135,   11,    2,  276,  109],
       [ 198,    2, 3080,  977, 2811],
       [1267,   39,   13,    6,    1],
       [ 112,   16,    2, 1914,   60],
       [   2,    1,    1,   20, 3074],
       [ 215, 3288, 3546,    2, 3128],
       [ 866, 4065,   71,    4,    1],
       [   2,   60,    9,  460,   59],
       [  29,   56,    9, 5512,    0],
       [2285,   59,   15,   14,  406],
       [   2,   37,   59,   15, 1166],
       [ 438,  359,   13,  170,    5],
       [ 485,    1, 5551,    3,    3],
       [   2,  780,   50,   27,  597],
       [   2,    1, 1190,  133,   39],
       [ 244,  128, 1729,   19,    2],
       [  79,   32,   64, 1972,   12],
       [  77,    4,    2,  408,    8],
       [   2,    1,   30,   32,   58],
       [1381, 1416,    0,    2,  246],
       [   2, 9704,  993,    6,  894],
       [  19,  375,   19,    3,    2],
       [  23,    1, 7431, 2764,    8],
       [  67,  694,  603,   26, 3067],
       [1855,  241, 4514,    5,   12],
       [   5,  333,   87,   39,   23],
       [   2,   74,  898,   10, 2435],
       [ 147,    2,   47,   50,   32],
       [  19,    2,   60,   47, 9512],
       [4519,   46,    1,  161,    7],
       [   4,  903,  513,   50,   32],
       [  23, 3019,   15,    2,  348],
       [  29, 1024, 4884,  387,    7],
       [1070,   14,   24,  118,   86],
       [   7,    2,  720,    4,    2],
       [ 196,   70,  547,  556,    5],
       [   1,   65,    8,    1,  197],
       [9695,  780, 7966, 4568, 7461],
       [  49, 7980,    7,    6, 1106],
       [  28,  143,   32, 2519,   16],
       [   2, 2019,   24,    1,   11],
       [1449,   18,    1,    8, 1854],
       [ 114, 2151,  282, 1132,   10],
       [  38,   46,    6,    1,    0],
       [ 486,    1,    2, 1425,    1],
       [ 282,    9,  129,  618,   24],
       [1899,  268,  412,  266,   29]]])
    print b.shape

    # trainer.run(lmdata, controllers=[annealer])
    # trainer.hidout(a)
    trainer.hidout(c)
    # model.save_params(default_model)